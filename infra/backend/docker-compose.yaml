version: "3.9"

services:

  fastapi:
    container_name: ${MODE}-${APP_NAME}
    image: ${APP_NAME}
    build:
      context: ../../backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ../../backend/env/.env
    command: sh -c "
      ./scripts/run_app.sh
      "
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:8000/api/healthcheck/" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    depends_on:
      alembic_migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    volumes:
      - ../../backend:/home/unprivilegeduser/shortener


  alembic_migrations:
    container_name: ${MODE}-alembic-migrations
    image: alembic-migrations
    build:
      context: ../../backend
      dockerfile: Dockerfile
    restart: on-failure
    env_file:
      - ../../backend/env/.env
    command: sh -c "
      ./scripts/run_migrations.sh
      "
    depends_on:
      postgres:
        condition: service_healthy


  postgres:
    container_name: ${MODE}-postgres-${POSTGRES_VERSION}
    image: postgres:${POSTGRES_VERSION}
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G
    volumes:
      - ../../persistentdata/db:/var/lib/postgresql/data/



  redis:
    container_name: ${MODE}-redis-${REDIS_VERSION}
    image: redis:${REDIS_VERSION}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
